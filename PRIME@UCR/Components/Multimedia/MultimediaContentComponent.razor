@using PRIME_UCR.Application.Services.Multimedia
@using System.IO
@inject IMultimediaContentService multimedia_content_service
@inject IFileService file_service
@inject IEncryptionService encrypt_service
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment _environment;

@using PRIME_UCR.Infrastructure


@* MultimediaContentComponent*@
<div>
@* Boton Principal *@
<div class="@divDDClass"> @* Div Contededor del Componente: Propiedades ligadas al codigo: class=@divDDClass *@
    <button class="btn btn-secondary dropdown-toggle m-button"
            type="button" id="dropdownMenuButton"
            data-toggle="dropdown" aria-haspopup="true"
            aria-expanded="@open"
            @onclick="Open"> @* Boton principal: Propiedades ligadas al codigo: aria-expanded=@open, onclick=Open *@
            @* Logo del Clip *@
            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
             width="26" height="26"
             viewBox="0 0 172 172"
             style=" fill:#000000;">
                <g fill="none" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><path d="M0,172v-172h172v172z" fill="none"></path><g fill="#ffffff"><path d="M130.44712,13.64423c-2.58413,0.07753 -5.16827,0.62019 -7.64904,1.44712c-9.92308,3.33353 -18.42488,10.98257 -26.875,19.43269l-54.57692,54.57692c-4.85817,4.85817 -8.57933,10.77584 -9.71635,17.77885c-1.13702,7.00301 0.98197,15.01382 7.02885,21.08654c6.20192,6.20192 14.49699,8.0625 21.5,6.82212c7.00301,-1.24038 12.86899,-5.01322 17.36538,-9.50962l59.95192,-59.95192c1.96394,-1.60216 2.86839,-4.16046 2.29988,-6.64122c-0.56851,-2.45493 -2.50661,-4.39303 -4.96154,-4.96154c-2.48077,-0.56851 -5.03906,0.33594 -6.64122,2.29988l-59.95192,59.95192c-2.84254,2.84255 -6.77043,5.14243 -10.33654,5.78846c-3.5661,0.64603 -6.58954,0.23257 -9.92308,-3.10096c-3.46274,-3.46274 -3.85036,-6.38281 -3.30769,-9.71635c0.54267,-3.33353 2.63582,-7.18389 5.99519,-10.54327l54.57692,-54.57692c7.98497,-7.98497 15.65986,-14.08353 21.70673,-16.125c6.04688,-2.04147 10.38822,-1.60216 17.36538,5.375c5.21996,5.19411 10.75,9.89724 12.19712,14.67788c0.72356,2.3774 0.72356,4.75481 -0.82692,8.68269c-1.55048,3.92788 -4.9357,9.27704 -11.37019,15.71154c-27.44351,27.44351 -48.50421,48.50421 -59.95192,59.95192c-10.15565,10.15565 -19.76863,16.95192 -28.32212,18.8125c-8.55349,1.86058 -16.66767,-0.12921 -27.28846,-10.75c-10.62079,-10.62079 -14.34195,-20.93149 -13.23077,-31.62981c1.11118,-10.69831 7.6232,-22.30108 19.63942,-34.31731c14.52284,-14.52283 44.86058,-42.37981 44.86058,-42.37981c2.01563,-1.49879 2.9976,-4.03125 2.53246,-6.51202c-0.46515,-2.48077 -2.29988,-4.47055 -4.70313,-5.14243c-2.42908,-0.69771 -5.03906,0.07753 -6.71875,1.9381c0,0 -30.36358,27.49519 -45.48077,42.58654c-13.38581,13.38582 -21.8101,27.75361 -23.36058,42.58654c-1.55048,14.83294 4.44471,29.45913 17.15865,42.17308c12.6881,12.71394 26.40986,17.26202 39.27885,14.47115c12.86899,-2.79087 24.00661,-11.60276 34.9375,-22.53365c11.44772,-11.44772 32.50842,-32.50841 59.95192,-59.95192c7.28726,-7.28726 11.99038,-13.77344 14.47115,-20.05288c2.48077,-6.27945 2.58413,-12.45553 1.03365,-17.57212c-3.07512,-10.23317 -11.37019,-15.94411 -15.50481,-20.05288c-4.72897,-4.72897 -9.97476,-7.72656 -15.29808,-9.09615c-2.66166,-0.69772 -5.27163,-1.11118 -7.85577,-1.03365z"></path></g></g>
            </svg>
    </button>
    @* Dropdown del boton *@
    <div class="@ddMenuClass" aria-labelledby="dropdownMenuButton">
        <div class="m-menu-div">
            <div class="row">
                @* InputFileComponent *@
                <div class="col">
                    <BlazorInputFile.InputFile OnChange="HandleFileSelected"></BlazorInputFile.InputFile> @* Componente BlazorInputFile *@
                </div>
                @* Implementar Loading wheel a la hora de subir un archivo. *@

                @* Loading Wheel *@
                <div class="col">

                </div>
                @* Cambiar iconos de contenido multimedia en tiempo real del botón de adjuntar contenido multimedia por los de la aplicación móvil. *@
                @* Camera Logo *@
                <div class="col">
                    <img class="data_btn" src="img/ico-foto.png" />
                </div>
                @* Audio Logo *@
                <div class="col">
                    <img class="data_btn" src="img/ico-audio.png" />
                </div>
                @* Video Logo *@
                <div class="col">
                    <img class="data_btn" src="img/ico-video.png" />
                </div>
            </div>
            
            @* Lista de Archivos asociados *@
            @if (!validFileType)
            {
                <p style="color: red">Archivo invalido</p>
            }
            @if (multimediaContent != null && multimediaContent.Count > 0)
            {
             
                // Notificacion de cantidad de archivos adjuntos
                @if (multimediaContent.Count == 1)
                {
                    <p>@multimediaContent.Count archivo adjunto</p>
                }
                else
                {
                    <p>@multimediaContent.Count archivos adjuntos</p>
                }

                <hr />

                // Tabla de Contenido Multimedia Adjunto
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Nombre</th>
                            <th scope="col">Tipo</th>
                            <th scope="col">Fecha</th>
                            <th scope="col"></th>
                            <th scope="col"></th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var mcontent in multimediaContent)
                        {
                            <tr>
                                <td>@mcontent.Nombre</td>
                                <td>@mcontent.Tipo</td>
                                <td>@mcontent.Fecha_Hora</td>
                                <td><button type="button" class="btn btn-secondary m-btn m-btn-rm"><a class="ver_link" href="#">Ver</a></button></td>
                                <td><button type="button" class="btn btn-danger m-btn m-btn-rm">Eliminar</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
@* File Counter Appendix*@
@if (!open && multimediaContent != null && multimediaContent.Count > 0)
{
    <div class="counter-append">
        @multimediaContent.Count
    </div>
}
</div>
@code {

    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public int ActionID { get; set; }
    public List<MultimediaContent> multimediaContent;
    public List<string> validTypeFiles;

    protected override void OnInitialized()
    {
        ActionID = 100;
        // Valid file types
        //.pdf, .doc, .docx, .xls, .txt, .mp3, .jpg, .png, .mp4, .wmv, .avi
        validTypeFiles = new List<string>() { "pdf", "doc", "docx", "xls", "txt", "mp3", "jpg", "png", "mp4", "wmv", "avi" };
    }

    protected override async Task OnInitializedAsync()
    {
        multimediaContent = await multimedia_content_service.GetByActionID(ActionID);
    }


    // Logica para abrir y cerrar el dropdown
    bool open = false;
    string divDDClass = "dropdown"; // clase del contenedor
    string ddMenuClass = "dropdown-menu"; // clase del dropdown

    // Metodo llamado cuando se presiona el boton principal
    public void Open()
    {
        divDDClass = open ? "dropdown" : "dropdown show";
        ddMenuClass = open ? "dropdown-menu" : "dropdown-menu show";

        open = !open;
    }
    // Fin logica para abrir y cerrar el dropdown

    // Logica para guardar y encriptar archivo
    IFileListEntry selected_file; // Archivo seleccionado por el usuario
    bool validFileType = true; // bool para indicar si el usuario selecciono un archivo valido

    // Metodo llamado cuando el usuario selecciona un archivo
    void HandleFileSelected(IFileListEntry[] files)
    {
        selected_file = files.FirstOrDefault(); // seleccionar archivo del usuario

        validFileType = ValidateFile(selected_file, validTypeFiles);

        if (!validFileType) return; // archivo invalido

        string filePath = Path.Combine(file_service.FilePath, selected_file.Name);
        byte[] pathEncrypted = encrypt_service.Encrypt(filePath);
        string pathEncryptedString = System.Text.Encoding.UTF8.GetString(pathEncrypted);
        if (selected_file == null) return;
        MultimediaContent mcontent = new MultimediaContent
        {
            Nombre = selected_file.Name,
            Archivo = pathEncryptedString,
            Descripcion = "prueba",
            Fecha_Hora = DateTime.Now,
            Tipo = selected_file.Type,
            ID_accion = ActionID
        };
        multimedia_content_service.AddFileAsync(mcontent);
        file_service.StoreFile(selected_file.Name, selected_file.Data);
        //encrypt_service.EncryptFile(file_service.FilePath,file.Name);
        multimediaContent.Add(mcontent);
    }

    bool ValidateFile(IFileListEntry file, List<string> validFileTypes)
    {
        if (file == null) return false;

        string type = file.Type;

        foreach (string validType in validTypeFiles)
            if (type.Contains(validType)) return true;

        return false;
    }

}
