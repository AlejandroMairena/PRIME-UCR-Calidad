@using PRIME_UCR.Domain.Constants;

@if (Incident.CurrentState != IncidentStates.Done.Nombre)
{
    <h3>Estados del Incidente</h3>
    <Loading IsLoading="@_isLoading">
        <div class="row">
            <table class="table table-responsive" width="100%">
                <tbody>
                    <tr>
                        <RadzenMenu>
                            @for (var index = 0; index < IncidentStatesList.Count; ++index)
                            {
                                <div class="text-center">
                                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="@setProgressIndicator(index)" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                                    </svg>
                                    @if (index < currentStateIndex)
                                    {
                                        @* Case where incident has already been in that state. *@
                                        <span data-toggle="tooltip" title="Completado">
                                            <RadzenMenuItem Text=@IncidentStatesList[index].Item2 class="@setStateColor(index)" />
                                        </span>
                                    }
                                    else if (index > currentStateIndex)
                                    {
                                        @* Case where incident hasn't been in that state yet. *@
                                        <span data-toggle="tooltip" title="Pendiente">
                                            <RadzenMenuItem Text=@IncidentStatesList[index].Item2 class="@setStateColor(index)" />
                                        </span>
                                    }
                                    else
                                    {
                                        @* Case where incident is in current state *@
                                        <span data-toggle="tooltip" title="En progreso">
                                            <RadzenMenuItem Text=@IncidentStatesList[index].Item2 class="@setStateColor(index)" />
                                        </span>
                                    }

                                </div>
                            }
                        </RadzenMenu>
                    </tr>
                </tbody>
            </table>
        </div>
        <br />
            @if (Incident.CurrentState == IncidentStates.Created.Nombre || Incident.CurrentState == IncidentStates.Rejected.Nombre)
            {
                @* Cases where incident is waiting for coordinator revision to change state. *@
                @if (Incident.CurrentState == IncidentStates.Created.Nombre)
                {
                    <div class="text-center mt-4">
                        <button class="btn btn-primary" @onclick="@Approve">Cambiar a estado Aprobado</button>
                        <button class="btn btn-outline-danger" @onclick="@Reject">Cambiar a estado Rechazado</button>
                    </div>
                }
                else if (Incident.CurrentState == IncidentStates.Rejected.Nombre)
                {
                    <div class="text-center mt-4">
                        <button class="btn btn-primary" @onclick="@Approve">Cambiar a estado Aprobado</button>
                        <button disabled class="btn btn-outline-danger">Cambiar a estado Rechazado</button>
                    </div>
                }
            }
            else
            {
                @* Case where incident doesn't need a revision to change state. *@
                <div class="text-center">
                    @if (PendingTasks.Count > 0)
                    {
                        <button disabled type="submit" class="btn btn-primary">Cambiar a estado @nextState</button>
                    }
                    else
                    {
                        <button @onclick="@ChangeState" type="submit" class="btn btn-primary">Cambiar a estado @nextState</button>
                    }
                </div>
            }
        <br />
        <br />

        <div class="row">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th scope="col">Siguiente estado</th>

                        @if (PendingTasks.Count > 0)
                        {
                            @if (Incident.CurrentState == IncidentStates.Rejected.Nombre || Incident.CurrentState == IncidentStates.Created.Nombre)
                            {
                                @* Case where incident is waiting for a cordinator to review info. *@
                                <th scope="col">
                                    Tareas pendientes
                                    <span data-toggle="tooltip" title="Esperando la revisión de un coordinador">
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-clock-fill clock-state" xmlns="http://www.w3.org/2000/svg">
                                            <path fill-rule="evenodd" d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 3.5a.5.5 0 0 0-1 0V9a.5.5 0 0 0 .252.434l3.5 2a.5.5 0 0 0 .496-.868L8 8.71V3.5z" />
                                        </svg>
                                    </span>
                                </th>
                            }
                            else
                            {
                                @* Case where there are pending taks to change state. *@
                                <th scope="col">
                                    Tareas pendientes <span data-toggle="tooltip" title="Hay tareas pendientes antes de poder cambiar de estado"
                                                            class="badge badge-primary badge-pill badge-text">!</span>
                                </th>
                            }
                        }
                        else
                        {
                            @* Case where incident is ready to change state. *@
                            <th scope="col">
                                Tareas pendientes <span data-toggle="tooltip" title="El incidente está listo para cambiar de estado"
                                                        class="badge badge-success badge-pill badge-text">✓</span>
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>@nextState</td>
                        @if (PendingTasks != null && PendingTasks.Count > 0)
                        {
                            <td>
                                <ul class="list-group container">
                                    @foreach (var task in PendingTasks)
                                    {
                                        <li class="bg-task d-flex flex-row row">
                                            <a @onclick="@( () => RedirectToTab(task.Item2) )"> @task.Item1  </a>
                                            <div class="col">
                                                <span data-toggle="tooltip" title="Presione sobre la tarea pendiente para ir al tab @toRedirectTab(task.Item2)"
                                                      class="badge badge-primary badge-pill badge-text">!</span>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </td>
                        }
                        else
                        {
                            <td>No hay información pendiente por agregar</td>
                        }
                    </tr>
                </tbody>
            </table>
        </div>
    </Loading>
}


