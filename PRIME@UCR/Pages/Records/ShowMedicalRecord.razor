@page "/show-medical-record"
@using PRIME_UCR.Domain.Models.MedicalRecords 
@inject PRIME_UCR.Application.Services.MedicalRecords.IMedicalRecordService medical_record_service

<h3>Lista Expedientes Medicos</h3>

<Pagination Total_pages="total_pages" Current_page="current_page" Radius="3" Selected_page="selected_page">
</Pagination>

<Filter FilterBox="filter_box" SetFilter="set_filter" ClearFilter="clear_filter"></Filter>


<table class="table table-hover wrapper_table">
    <thead>
        <tr>
            <th align="center">NumExpediente</th>
            <th align="center">Cedula</th>
            <th align="center">Nombre</th>
            <th align="center">Apellido1</th>
            <th align="center">Apellido2</th>
        </tr>
    </thead>

    <tbody>
        @for (int expediente = start_show_record; expediente < end_show_record; ++expediente)
        {
            <tr style="transform: rotate(0);">
                <th scope="row"><a href="#" class="stretched-link">@medical_records[expediente].Id</a></th>
                <td align="center">@medical_records[expediente].CedulaPaciente</td>
                <td align="center">@medical_records[expediente].Paciente.Nombre</td>
                <td align="center">@medical_records[expediente].Paciente.PrimerApellido</td>
                <td align="center">@medical_records[expediente].Paciente.SegundoApellido</td>
            </tr>

        }
    </tbody>
</table>




@code {

    public List<Expediente> medical_records { get; set; }

    public string filter_box { get; set; } = string.Empty;

    //its the amount of tabs of the pagination, this is bind to the pagination component.
    public int total_pages { get; set; } = 3;
    //current pagination's page, this is bind to the pagination component.
    public int current_page { get; set; } = 1;

    //the current amount of medical records, for example, if you set a filter, this should change.
    public int total_elements { get; set; } = 0;

    //the amount of records you want to display on every pagination's page.
    public int sub_group_range { get; set; }

    //there are a max amount of records, and also the "sub_group_range"
    //this is the start index of the "medical records resources" return to code line 76 and
    //check the for of the html's table.
    public int start_show_record { get; set; } = 0;

    //this is the end of the index of the "medical records resources"
    public int end_show_record { get; set; }


    private async Task set_filter(string filter_name)
    {

        current_page = 1;
        await get_records_with_filter(filter_name);

    }

    private async Task clear_filter()
    {
        get_records();
    }

    //this is what happens when you click the "Buscar" button because this method is bind to the component
    //the full method is a parameter of the component.
    async Task get_records_with_filter(string filter_box)
    {

        IEnumerable<Expediente> records = await medical_record_service.GeyByConditionAsync(filter_box);
        medical_records = records.ToList();


        current_page = 1;
        sub_group_range = 1;
        total_elements = medical_records.Count;
        total_pages = total_elements / sub_group_range;

        if (total_elements > 0)
        {
            end_show_record = start_show_record + sub_group_range;

            if (end_show_record > total_pages * sub_group_range)
            {

                end_show_record = total_pages * sub_group_range;

            }
        }
        else
        {
            end_show_record = 0;
        }
    }


    //this is the method bind to the pagination's component, the full method is a parameter, watch code line 17
    private async Task selected_page(int page)
    {
        //current page is a parameter of the pagination's component, return to code line 65
        current_page = page;
        await get_records_per_page(page, total_pages);
    }


    //this is what happens when the program starts, so we set some values to the "medical records resources "
    protected override void OnInitialized()
    {
        get_records();

        base.OnInitialized();
    }


    private async Task get_records() {

        IEnumerable<Expediente> records = await medical_record_service.GetAllAsync();
        medical_records = records.ToList();
        start_values();
    }


    private void start_values()
    {
        total_elements = medical_records.Count;

        sub_group_range = 3;

        total_pages = total_elements / sub_group_range;

        end_show_record = start_show_record + sub_group_range;

    }


    async Task get_records_per_page(int current_page, int total_pages)
    {

        start_show_record = sub_group_range * (current_page - 1);

        end_show_record = start_show_record + sub_group_range;

        if (end_show_record > total_pages * sub_group_range)
        {

            end_show_record = total_pages * sub_group_range;

        }

    }


}
